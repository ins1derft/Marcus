version: '3.8'

services:
  nginx:
    build:
      context: ../nginx
      dockerfile: ../docker/production/Dockerfile.nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/default.conf:/etc/nginx/default.conf:ro
      - ../certbot/www:/var/www/certbot/:ro
      - ../certbot/conf/:/etc/nginx/ssl/:ro
      - ../nginx/logs/:/var/log/nginx
    restart: unless-stopped
    networks:
      - internal
    depends_on:
      - frontend
      - strapi

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ../certbot/www/:/var/www/certbot/:rw
      - ../certbot/conf/:/etc/letsencrypt/:rw
    networks:
      - internal

  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/production/Dockerfile.frontend
      args:
        API_CONTAINER_URL: ${API_CONTAINER_URL}
        API_CLIENT_URL: ${API_CLIENT_URL}
        API_TOKEN: ${API_TOKEN_PRODUCTION}
        NEXT_PUBLIC_MEILISEARCH_HOST: ${MEILISEARCH_HOST}
        NEXT_PUBLIC_MEILISEARCH_API_KEY: ${MEILISEARCH_MASTER_KEY}
    environment:
      NEXT_PUBLIC_MEILISEARCH_HOST: ${MEILISEARCH_HOST}
      NEXT_PUBLIC_MEILISEARCH_API_KEY: ${MEILISEARCH_MASTER_KEY}
    volumes:
      - ../frontend/public:/frontend/public
      - ../frontend/src:/frontend/src
    restart: unless-stopped
    networks:
      - internal
    depends_on:
      - strapi
     
  strapi:
    build:
      context: ../strapi
      dockerfile: ../docker/production/Dockerfile.strapi
      args:
        API_CLIENT_URL: ${API_CLIENT_URL}
    environment:
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_HOST: database
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_SSL: ${DATABASE_SSL}
      NODE_ENV: ${NODE_ENV}
      MEILISEARCH_HOST: ${MEILISEARCH_HOST}
      MEILISEARCH_MASTER_KEY: ${MEILISEARCH_MASTER_KEY}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_TLS: ${REDIS_TLS}
    volumes:
      - ../strapi/config:/strapi/config
      - ../strapi/database:/strapi/database
      - ../strapi/public:/strapi/public
      - ../strapi/src:/strapi/src
    restart: unless-stopped
    networks:
      - internal
    depends_on:
      database:
        condition: service_started
      meilisearch:
        condition: service_started
      redis:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - internal

  database:
    image: postgres:14-alpine
    environment:
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_DB: ${DATABASE_NAME}
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - internal

  meilisearch:
    image: getmeili/meilisearch:v1.7
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_MASTER_KEY}
    volumes:
      - meilisearch-data:/meili_data
    restart: unless-stopped
    networks:
      - internal

volumes:
  postgres-data:
  meilisearch-data:
  redis-data:

networks:
  internal:
